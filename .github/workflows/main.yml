name: Deploy
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  PROJECT_NAME: jigglogsocket
  BK_NAME: jigglogsocket
  APP_NAME: jigglogkotlin
  DEPLOY_GROUP: jigglogkotlin

jobs:
  build:
    name: Build, EC2
    runs-on: ubuntu-latest
    # 백엔드 배포
    strategy:
      matrix:
        node-version: [21.5.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js version ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: yarn install websocket server
        run: |
          yarn

      - name: Make .env file
        run: |
          touch .env	
          cat << EOF >> .env	
          ${{ secrets.ENV }}

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/jigglogsocket .
          docker push ${{ secrets.DOCKER_USERNAME }}/jigglogsocket

      # - name: Make zip file
      #   run: zip -qq -r ./$GITHUB_SHA.zip .
      #   shell: bash
      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.EC2_HOST_IP4_PUBLIC }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.UBUNTU_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/jigglogsocket
            sudo docker compose -f docker-compose.yml up -d --build 
            sudo docker image prune -f

      # - name: Transfer to EC2
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_IAM_MANAGER_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_IAM_MANAGER_SECRET_ACCESS_KEY }}
      #     aws-region: ap-northeast-2

#       - name: Upload to S3
#         run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BK_NAME/$PROJECT_NAME/$GITHUB_SHA.zip
#
#       - name: Code Deploy
#         run: aws deploy create-deployment --application-name $APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOY_GROUP --s3-location bucket=$BK_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
